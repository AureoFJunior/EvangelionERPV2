name: Build, Push and Deploy

on:
  pull_request:
    branches:
      - release
      - develop

defaults:
 run:
  working-directory: ./EvangelionERPV2.Web

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:dind
        options: --privileged

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Login to Docker Hub
      run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and Push Docker image to Docker Hub
      run: |
        docker-compose build
        docker-compose push

    - name: Configure AWS CLI
      run: aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} && aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} && aws configure set default.region ${{ secrets.AWS_REGION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Get ECR registry URL
      id: ecr
      run: |
        ECR_REGISTRY=$(aws ecr describe-repositories --repository-names "${{ secrets.ECR_EVANGELIONERPV2_REPOSITORY }}" --region ${{ secrets.AWS_REGION }} --output json | jq -r '.repositories[0].repositoryUri')
        echo "::set-output name=registry_url::$ECR_REGISTRY"

    - name: Login to "evangelionerpv2" ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.ecr.outputs.registry_url }}

    - name: Tag and Push Docker image to "evangelionerpv2" ECR
      run: |
        IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)

        echo "IMAGE_TAG: $IMAGE_TAG"
        echo "Registry URL: ${{ steps.ecr.outputs.registry_url }}"
        echo "Repository: ${{ secrets.ECR_EVANGELIONERPV2_REPOSITORY }}"

        docker tag evangelionerpv2_web ${{ steps.ecr.outputs.registry_url }}/${{ secrets.ECR_EVANGELIONERPV2_REPOSITORY }}:$IMAGE_TAG
        docker push ${{ steps.ecr.outputs.registry_url }}/${{ secrets.ECR_EVANGELIONERPV2_REPOSITORY }}:$IMAGE_TAG

  deploy_to_ecs:
    runs-on: ubuntu-latest
    needs: ["build_and_push"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS CLI
      run: aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} && aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} && aws configure set default.region ${{ secrets.AWS_REGION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to Amazon ECS
      run: |
        # Authenticate Docker with ECR (Amazon Elastic Container Registry)
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

        # Build and push Docker images to ECR
        docker-compose build
        docker-compose push

        # Create or update the ECS task definition
        ecs-cli compose --file docker-compose.yml --project-name evangelionerpv2 service up

        # Update the ECS service
        ecs-cli compose --file docker-compose.yml --project-name evangelionerpv2 service ps

        # Wait for the ECS service to stabilize
        ecs-cli compose --file docker-compose.yml --project-name evangelionerpv2 service wait

        echo "Deployment to Amazon ECS completed successfully."