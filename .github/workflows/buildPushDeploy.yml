name: Build, Push and Deploy

on:
  pull_request:
    branches:
      - release
      - develop

permissions:
  contents: read
  
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: evangelionerpv2-repository
  ECS_SERVICE: evangelionerpv2-svc
  ECS_CLUSTER: evangelionerpv2_cluster
  ECS_TASK_DEFINITION: evangelionerpv2_task_definition

defaults:
 run:
  working-directory: ./EvangelionERPV2.Web

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:dind
        options: --privileged

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker
      uses: docker/setup-buildx-action@v1
      with:
        dockerfile: Dockerfile

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -f Dockerfile --no-cache -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .. 
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

  deploy_to_ecs:
    runs-on: ubuntu-latest
    needs: ["build_and_push"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS CLI
      run: aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} && aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} && aws configure set default.region ${{ secrets.AWS_REGION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to Amazon ECS
      run: |
        # Authenticate Docker with ECR (Amazon Elastic Container Registry)
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

        # Build and push Docker images to ECR
        docker-compose build
        docker-compose push

        # Create or update the ECS task definition
        ecs-cli compose --file docker-compose.yml --project-name evangelionerpv2 service up

        # Update the ECS service
        ecs-cli compose --file docker-compose.yml --project-name evangelionerpv2 service ps

        # Wait for the ECS service to stabilize
        ecs-cli compose --file docker-compose.yml --project-name evangelionerpv2 service wait

        echo "Deployment to Amazon ECS completed successfully."